const id = "projects.mdx";
						const collection = "blog";
						const slug = "projects";
						const body = "import Pokeball from '../../components/img/Pokeball';\nimport Tooltip from '../../components/Tooltip';\n\n<img src=\"/img/pokecon.png\" alt=\"Pokematch\" class=\"float-right max-w-[150px] sm:max-w-[220px] ml-5\" />\n\nI wanted to create a simple game with my daughter to get the programming wheels turning in her head. It started as a card memory matching game and grew into an actually kinda fun game. There are 9 total rounds for each Pokemon generation, at the end of each round you are shown the Pokemon you just caught. You then have a chance to earn a \"power up\" by guessing which of those would win in a battle (this is based on a simple calculation of the sum of their stats). \n\nThe powerups could be:\n\n<ul style=\"list-style:none;line-height:1;\">\n  <li><Pokeball fill=\"#f8d878\" /> reveal power (temporarily reveals all the cards)</li>\n  <li><Pokeball fill=\"#6844fc\" /> turn power (takes away 2 turns)</li>\n  <li><Pokeball fill=\"#e40058\" /> time power (takes 7 seconds off the clock)</li>\n</ul>\n\nSide projects are great, even small trivial ones like this one. I still ended up learning some new things, like:\n\n## Playing sounds is finicky <Tooltip client:visible content=\"*as fuck\">af</Tooltip>, particularly on mobile\n\nGenerally playing sounds behaved as I expected on desktop but as soon as I started testing on mobile I'd run into unexpected behavior. Sometimes the sounds would decide not to play, other times it wouldn't play at all. I spent hours debugging sound issues thinking there was something janky with my code. I had recently finished Josh W Comeau [The Joy of React](https://www.joyofreact.com/) course and stumbled across his [blog post](https://www.joshwcomeau.com/react/announcing-use-sound-react-hook/) about a \"useSound\" react hook he created. I wasn't necessarily expecting it to fix my sound issues but figured I'd give it a try since it gives you some nice features like:\n\n  - Prematurely stop the sound, or pause/resume the sound.\n  - Load an audio sprite and split it up into many individual sounds.\n  - Tweak playback speed to speed up / slow down sounds.\n  - Tons of event listeners.\n  - Lots of other advanced stuff, made possible by [Howler](https://howlerjs.com/).\n\nBut lo and behold, it fixed all my sound issues! The secrety key though wasn't the nice hook Josh created but the audio library called Howler which makes working with audio in js super reliable across all platforms. \n\nGive use-sound a try in your next project that includes audio.\n\n```bash\nnpm add use-sound\n```\n\n## TanStack Query is rad\n\nI wanted to mess around with the latest tanstack query (previously known as react-query) because if you've ever had to fetch data in a react app you know it can get pretty ugly. You get all sorts of nice things out of the box like caching, refetching, and pagination. I'm not going to go into too much detail about it here but if you're interested in learning more about it check out the [docs](https://tanstack.com/query/latest). I also highly recommend checkout out TkDodo's [blog](https://tkdodo.eu/blog/all), he's got all sorts of excellent articles about it.\n\nHere's an example of how I used tanstack query to fetch random Pokemon from a specific generation:\n\n```typescript\nexport const TOTAL_GENS = 9;\nconst POKE_API_URL = \"https://pokeapi.co/api/v2/pokemon\";\n\n// specify the offset and limit for each generation\nconst pokemonGenerationData: PokemonGenerationData = {\n  1: { offset: 0, limit: 151 },\n  2: { offset: 151, limit: 100 },\n  3: { offset: 251, limit: 135 },\n  4: { offset: 386, limit: 107 },\n  5: { offset: 493, limit: 156 },\n  6: { offset: 649, limit: 72 },\n  7: { offset: 721, limit: 88 },\n  8: { offset: 809, limit: 96 },\n  9: { offset: 905, limit: 103 },\n};\n\nconst getRandomPokemon = async (gen: PokemonGeneration, BOARD_SIZES: number) => {\n  const { offset, limit } = pokemonGenerationData[gen];\n  const url = `${POKE_API_URL}/?offset=${offset}&limit=${limit}`;\n\n  try {\n    const response = await fetch(url);\n    const { results } = await response.json();\n    // here we're getting a random selection of pokemon from the generation\n    const randomPokemon = results.sort(() => Math.random() - 0.5).slice(0, BOARD_SIZES / 2);\n    // then we fetch the data for each pokemon\n    const promises = randomPokemon.map(async ({ url }: Result) => {\n      const response = await fetch(url);\n      return await response.json();\n    });\n\n    const pokemonData = await Promise.all(promises);\n    // this creates the card duplicates and shuffles\n    const shuffledCards = shuffle([...pokemonData, ...pokemonData]);\n    return shuffledCards;\n  } catch (error) {\n    console.warn(\"error\", error);\n  } \n};\n\n// finally our usePokemon hook\nexport const usePokemon = (gen: PokemonGeneration, BOARD_SIZES: number): UseQueryResult<Pokemon[], Error> => {\n  return useQuery({\n    queryKey: [\"pokemonList\", gen],\n    queryFn: () => getRandomPokemon(gen, BOARD_SIZES),\n    staleTime: 1000 * 60 * 60 * 24,\n  });\n};\n\n// and what's awesome about tanstack query is we get things like \n// isLoading, isFetching, error, and refetch out of the box\nconst { data, isLoading, isFetching, error, refetch }: PokemonData = usePokemon(gen, boardSize);\n```\n\nThat's the meat and potatoes of it, I created a custom usePokemon hook, after each round I call `refetch()` when the gen changes and it fetches a new set of pokemon.\n\nYou can play the game [here](https://pokematch.vercel.app/) and view the source code [here](https://github.com/mikowl/pokematch).";
						const data = {author:"Michael Elias",pubDatetime:new Date(1680393600000),title:"Silly side projects are important",postSlug:"silly-side-projects-are-important",featured:false,tags:["typescript","react","preact","tanstack-query","pokeapi","vite","vercel"],ogImage:"\u002Fimg\u002Fpokematchog.png",postThumb:"\u002Fimg\u002Fpokecon.png",description:"I was messing around with the PokeApi to get an idea of how tanstack-query works to potentially use it for work"};
						const _internal = {
							filePath: "/Users/melias/Sites/mikowl-ap/src/content/blog/projects.mdx",
							rawData: "\nauthor: Michael Elias\npubDatetime: 2023-04-02\ntitle: Silly side projects are important\npostSlug: silly-side-projects-are-important\nfeatured: false\nogImage: /img/pokematchog.png\npostThumb: /img/pokecon.png\ntags:\n  - typescript\n  - react\n  - preact\n  - tanstack-query\n  - pokeapi\n  - vite\n  - vercel\ndescription: I was messing around with the PokeApi to get an idea of how tanstack-query works to potentially use it for work",
						};

export { _internal, body, collection, data, id, slug };
