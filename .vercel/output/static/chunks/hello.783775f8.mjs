const id = "hello.mdx";
						const collection = "blog";
						const slug = "hello";
						const body = "\nimport Dadjoke from '../../components/blog/Dadjoke'\nimport DumbButton from '../../components/blog/DumbButton'\n\n<img src=\"/astro.svg\" alt=\"Astro\" class=\"float-right w-1/4 m-4\" />\n\nI had an old blog written in [Jekyll](https://jekyllrb.com/) that I started in 2013 but it hadn't been updated in an embarassingly long time so I decided to start so fresh and so clean clean. Here we are, a new website built with [Astro](https://astro.build/). Unless you've been living under a rock (or if you're not a web dev) you've probably heard of it.\n\nOne of the coolest things it brings to the table is it's \"Component Islands\" architecture, so like think of the various components your app might have: header, navigation, sidebar, footer, etc. Some of these components could be mostly static like your footer but you may also have something like an image carousel component that's interactive. In astro you can mix and match your UI framework, hypothetically you could have a header written in [Svelte](https://svelte.dev/), a sidebar written in [Vue](https://vuejs.org/), and an image carousel written in [React](https://react.dev/). Although I'm not quite sure why anyone in their sane mind would do that. Anyways, the biggest benefit of astro islands is performance, most of your website is converted to fast static html and the javascript is only loaded for the individual components that actually need it.\n\nMy favorite, and newish part of Astro is the ability to use [mdx](https://mdxjs.com/) files which is like markdown but with jsx, so if I want I can build little components and slap them in my blog post, for example:\n\n<Dadjoke client:visible />\n\nor like make this super fun game where the goal is to click the button 10 times:\n\n<DumbButton client:visible />\n\nThat's pretty awesome, right? Astro gives you multiple [client directives](https://docs.astro.build/en/reference/directives-reference/#client-directives):\n\n  - `client:load` load and hydrate the component js immediately on page load\n  - `client:idle`  load and hydrate the component js once the page is done with its initial load \n  - `client:visible` load and hydrate the component js once the component has entered the userâ€™s viewport\n  - `client:media` loads and hydrates the component js once a certain CSS media query is met\n  - `client:only` like load except skips html server-rendering completely\n\nFor example, with my Dadjoke component, I set it to `client:visible` so the javascript doesn't load until the component reaches the user's viewport.\n\n```js filename=\"Dadjoke.tsx\"\n<Dadjoke client:visible />\n```\n\nand you're probably wanting my amazing Dadjoke component, so here you go:\n\n```js filename=\"Dadjoke.tsx\"\nimport { useState } from \"react\";\n\nconst Dadjoke = () => {\n  const [joke, setJoke] = useState<string>(\"\");\n\n  const generateDadJoke = () => {\n    fetch(\"https://icanhazdadjoke.com/\", {\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n      .then(res => res.json())\n      .then(data => setJoke(data.joke));\n  };\n\n  return (\n    <>\n      <button className=\"btn\" onClick={generateDadJoke}>\n        {joke ? \"ðŸ‘´ Generate Another Dad Joke ðŸ¤ª\" : \"ðŸ‘´ Generate Dad Joke ðŸ‘´\"}\n      </button>\n      {joke && <blockquote>{joke}</blockquote>}\n    </>\n  );\n};\n\nexport default Dadjoke;\n```";
						const data = {author:"Michael Elias",pubDatetime:new Date(1680307200000),title:"Astro and mdx and components in markdown",postSlug:"astro-and-mdx",featured:false,tags:["astro","mdx","react","markdown"],postThumb:"\u002Fimg\u002Fthumbs\u002Fastro.jpg",description:"I was all like whattt and they were all like nooooo way and I was like yessss and they were all like bruhhhhhh and I was like..."};
						const _internal = {
							filePath: "/Users/melias/Sites/mikowl-ap/src/content/blog/hello.mdx",
							rawData: "\nauthor: Michael Elias\npubDatetime: 2023-04-01\ntitle: Astro and mdx and components in markdown\npostSlug: astro-and-mdx\npostThumb: /img/thumbs/astro.jpg\nfeatured: false\ntags:\n  - astro\n  - mdx\n  - react\n  - markdown\ndescription: I was all like whattt and they were all like nooooo way and I was like yessss and they were all like bruhhhhhh and I was like...",
						};

export { _internal, body, collection, data, id, slug };
